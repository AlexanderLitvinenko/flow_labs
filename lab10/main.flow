import lingo/pegcode/driver;
import ds/tree;

ArExpr ::= ArInt, ArVar, ArMinus, ArMult, ArSum, ArDiv, ArSub;
ArSum(lhs : ArExpr, rhs : ArExpr);
ArMult(lhs : ArExpr, rhs : ArExpr);
ArSub(lhs : ArExpr, rhs : ArExpr);
ArDiv(lhs : ArExpr, rhs : ArExpr);


ArMinus(num : ArNum);
ArNum ::= ArInt, ArVar;
ArVar(var : string);
ArInt(val : int);

// rational number
ArRat(num : int, den : int);

ar2s(expr : ArExpr) -> string {
    switch(expr : ArExpr) {
        ArSum(lhs, rhs) :  "(" + ar2s(lhs) + " + " + ar2s(rhs) + ")";
        ArMult(lhs, rhs) : "(" + ar2s(lhs) + " * " + ar2s(rhs) + ")";
        ArSub(lhs, rhs) : "(" + ar2s(lhs) + " - " + ar2s(rhs) + ")";
        ArDiv(lhs, rhs) : "(" + ar2s(lhs) + " / " + ar2s(rhs) + ")";
        ArInt(var) : i2s(var);
		ArVar(var) : var;
		ArMinus(num) : "-" + ar2s(num);
    }
}

s2ar(str : string) -> ArExpr {
    e_gr = "#include extended_grammar.lingo";
    parsic(compilePegGrammar(e_gr),
			str,
			defaultPegActions
          )
}

make_rules(rules_arr: [Pair<string, string>]) -> Tree<ArExpr, ArExpr> {
    foldi(rules_arr, makeTree(), \i, acc, rule -> {
        setTree(acc, s2ar(rule.first), s2ar(rule.second));
    });
}

inline_variables(ex : ArExpr, varResolve : Tree<ArVar, ArExpr>) -> ArExpr {
    switch(ex) {
        ArInt(val): ex;

        ArVar(name) : {
			resolve = lookupTree(varResolve, ex);
			switch (resolve) {
				None() : ex;
				Some(res) : res;
			}
        }

        ArMinus(arg) : {
			var = inline_variables(arg, varResolve);

			switch(var) {
				ArInt(i) : ArMinus(var);
				ArVar(v) : ArMinus(var);
				default : {
					//	println("Unexpected type, expected int or var, but got: " + var.name);
					// never used
					ArMinus(ArInt(1));
				}
			}
		}
		
        ArSum(left, right) : { 
			ArSum(inline_variables(left, varResolve), inline_variables(right, varResolve));
		}
        ArSub(left, right) : { 
			ArSub(inline_variables(left, varResolve), inline_variables(right, varResolve));
		}
        ArDiv(left, right) : { 
			ArDiv(inline_variables(left, varResolve), inline_variables(right, varResolve));
		}
        ArMult(left, right) : { 
			ArMult(inline_variables(left, varResolve), inline_variables(right, varResolve));
		}
    }
}

find_matches_in_binary_op(left : ArExpr , right : ArExpr,  left2 : ArExpr, right2 : ArExpr, var_resolver : Tree<ArVar, ArExpr>) -> Maybe<Tree<ArVar, ArExpr>> {
	matchLL = match(left, left2, var_resolver);
	switch(matchLL) {
		None() : None();
		Some(resolver) : match(right, right2, resolver);
	}
}

match(template : ArExpr, ex : ArExpr, var_resolver : Tree<ArVar, ArExpr>) -> Maybe<Tree<ArVar, ArExpr>> {
    switch(template) {
        ArInt(i): {
            switch(ex) {
                ArInt(i1): {
					if (template == ex) {
						Some(var_resolver);
					}
					else {
						None();
					}
                }
                default: None();
            }
        }

        ArVar(var): {
            cur_val = lookupTree(var_resolver, template);
			switch(cur_val) {
				None() : { Some(setTree(var_resolver, template, ex)); }
				Some(cur) : {
					if (cur == ex) { Some(var_resolver); }
					else { None(); }
				}
            }
        }

        ArMinus(arg): {
            switch(ex) {
                ArMinus(arg2): match(arg, arg2, var_resolver);
                default: None();
            }
        }

		ArSum(left, right) : {
            switch(ex) {
                ArSum(left2, right2) : find_matches_in_binary_op(left, right, left2, right2, var_resolver);
				default: None();
            }
		}

		ArSub(left, right) : {
            switch(ex) {
                ArSub(left2, right2) : find_matches_in_binary_op(left, right, left2, right2, var_resolver);
				default: None();
			}
		}

		ArMult(left, right) : {
            switch(ex) {
                ArMult(left2, right2) : find_matches_in_binary_op(left, right, left2, right2, var_resolver);
				default: None();
			}
		}

		ArDiv(left, right) : {
            switch(ex) {
                ArDiv(left2, right2) : find_matches_in_binary_op(left, right, left2, right2, var_resolver);
				default: None();
			}
		}
	}
}

reduce_one_exp_level(ex : ArExpr, rules : Tree<ArExpr, ArExpr>) -> ArExpr {

    res = ex;

    res2 = switch(res) {
		ArInt(val) : res;
		ArVar(var) : res;
		ArMinus(arg) : {
			var = reduce_one_exp_level(arg, rules);
			switch(var) {
				ArInt(i) : ArMinus(var);
				ArVar(v) : ArMinus(var);
				default : {
					// println("Unexpected type, expected int or var, but got: " + var.name);
					ArMinus(ArInt(1));
				}
			}
		}

		ArSum(left, right) : ArSum(reduce_one_exp_level(left, rules), reduce_one_exp_level(right, rules));
		ArSub(left, right) : ArSub(reduce_one_exp_level(left, rules), reduce_one_exp_level(right, rules));
		ArDiv(left, right) : ArDiv(reduce_one_exp_level(left, rules), reduce_one_exp_level(right, rules));
		ArMult(left, right) : ArMult(reduce_one_exp_level(left, rules), reduce_one_exp_level(right, rules));
    }

    foldTree(rules, res2, \rule, value, acc -> {
		mInfo = match(rule, acc, makeTree());

		switch(mInfo) {
			None() : acc;
			Some(val) : inline_variables(value, val);
		}
    });
}


reduce(ex : ArExpr, rules : Tree<ArExpr, ArExpr>) -> ArExpr {
    reduced = reduce_one_exp_level(ex, rules);

	if (reduced == ex) {
		reduced;
	} else {
		reduce(reduced, rules);
	}
}

main() {
    rules_arr = [
                Pair("(x - x)", "(0)"),
				Pair("(x / x)", "(1)"),
                Pair("(x + x)", "(2 * x)"),
                Pair("((y * x) + (z * x))", "((y + z) * x)"),
                Pair("(0 * x)", "(0)"),
                Pair("(x + 0)", "(x)"),
                Pair("(x * 1)", "(x)")
    ];

    rules = make_rules(rules_arr);

    examples = [
        "((4 * x) + (5 * x))",
        "(((3 * x) + 7) + (7 + (3 * x)))",
		"((x - y) * (x + y))",
		"(((x + x) + x) / ((x + x) + x))",
		"(y + (x / 0))"
    ];

    iter(examples, \example -> {
        ex = s2ar(example);
        exs = reduce(ex, rules);
        println("before: " + example);
        println("after:  " + ar2s(exs));
        println("");
    });
}
