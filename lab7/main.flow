import lingo/pegcode/driver;
import runtime;

ArExpr ::= ArSum, ArMult, ArSub, ArDiv, ArInt;
ArSum(lhs : ArExpr, rhs : ArExpr);
ArMult(lhs : ArExpr, rhs : ArExpr);
ArSub(lhs : ArExpr, rhs : ArExpr);
ArDiv(lhs : ArExpr, rhs : ArExpr);
ArInt(val : int);
ArInt(val : int);

s2ar(str : string) -> ArExpr {

    e_gr = "#include grammar";

    parsic(
            compilePegGrammar(e_gr),

            str,
            SemanticActions(setTree(defaultPegActions.t,
                    "createArInt", \s -> ArInt(s2i(s[0]))))
          )
}

ar2s(expr : ArExpr) -> string {
    switch(expr : ArExpr) {
        ArSum(lhs, rhs) :  "(" + ar2s(lhs) + "+" + ar2s(rhs) + ")";
        ArMult(lhs, rhs) : "(" + ar2s(lhs) + "*" + ar2s(rhs) + ")";
        ArSub(lhs, rhs) :  "(" + ar2s(lhs) + "-" + ar2s(rhs) + ")";
        ArDiv(lhs, rhs) : "(" + ar2s(lhs) + "/" + ar2s(rhs) + ")";
        ArInt(var) : i2s(var);
    }
}

calculate(expr : ArExpr) -> double {
    switch(expr : ArExpr) {
        ArSum(lhs, rhs)  : calculate(lhs) + calculate(rhs);
        ArMult(lhs, rhs) : calculate(lhs) * calculate(rhs);
        ArSub(lhs, rhs)  : calculate(lhs) - calculate(rhs);
        ArDiv(lhs, rhs)  : calculate(lhs) / calculate(rhs);
        ArInt(var) : i2d(var);
    }
}

main() {
//    println((s2ar("((1+2)*321)")));
    println(calculate(s2ar("((((1+2)*3)+1)/0)")));
}
