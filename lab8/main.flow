import lingo/pegcode/driver;
import runtime;
import lib/sys/system;

ArExpr ::= ArSum, ArMult, ArSub, ArDiv, ArInt, ArVar, ArMinus;

ArNum ::= ArInt, ArVar;

ArSum(lhs : ArExpr, rhs : ArExpr);
ArMult(lhs : ArExpr, rhs : ArExpr);
ArSub(lhs : ArExpr, rhs : ArExpr);
ArDiv(lhs : ArExpr, rhs : ArExpr);
ArVar(var : string);
ArInt(val : int);
ArMinus(num : ArNum);

// rational number
ArRat(num : int, den : int);

s2ar(str : string) -> ArExpr {
    e_gr = "#include extended_grammar.lingo";
    parsic(compilePegGrammar(e_gr),
			str,
            SemanticActions(setTree(defaultPegActions.t,
                    "createArInt", \s -> ArInt(s2i(s[0]))))
          )
}

// -a / -b -> a / b
// a / -b -> -a / b
get_numerator(a : int, b : int) -> int {
	if (a < 0 && b < 0) {-a;}

	else if (a > 0 && b < 0) {-a;}

	else {a;}
}

get_denominator(a : int, b : int) -> int {
	if (a < 0 && b < 0) {-b;}

	else if (a > 0 && b < 0) {-b;}

	else {b;}
}

simplify_fract(numerator : int, denominator : int) -> Maybe<ArRat> {
	if (denominator == 0) {
		None();
	}
	else {
		// -a / -b -> a / b
		// a / -b -> -a / b
		num = get_numerator(numerator, denominator);
		den = get_denominator(numerator, denominator);

		nod : int = NOD(num, den);
		Some(ArRat(num / nod, den / nod));
	}
}

NOD(numerator : int, denominator : int) -> int {
	if (numerator == 0) { 1; }

	else {
		abs_num : int = iabs(numerator);

		if (abs_num == denominator) {
			abs_num;
		}
		
		else if (abs_num > denominator) {
			NOD(abs_num - denominator, denominator);
		}

		else {
			NOD(abs_num, denominator - abs_num);
		}
	}
}

get_var(numerator : int, denominator : int) -> Maybe<ArRat> {
	if (denominator <= 0) {
		None();
	}
	else {
		simplify_fract(numerator, denominator);
	}
}

handle_var(var : string) -> Maybe<ArRat> {

	print("Input variable ");
	println(var);

	print("numerator = ");
	numerator : int = s2i(readUntil("\n"));

	print("denominator = ");
	denominator : int = s2i(readUntil("\n"));
	
	get_var(numerator, denominator);
}

apply(lhs : Maybe<ArRat>,
	  rhs : Maybe<ArRat>, 
	  func : (l : ArRat, r : ArRat) -> Maybe<ArRat>) -> Maybe<ArRat> {

	switch(lhs) {
		None() : None();
		Some(l) : {
			switch(rhs) {
				None() : None();
				Some(r) : {
					func(l, r);
				}
			}
		}
	}
}

// if x == 0 return y
// if y == 0 return x
simplify_sum(x : ArExpr, y : ArExpr) -> ArExpr {
	switch (x) {
		ArInt(x_val) : {
			if (x_val == 0) { y; }
			else handle_sum_y(x, y);
		}
		default: handle_sum_y(x, y);
	}
}

handle_sum_y(x : ArExpr, y : ArExpr) -> ArExpr {
	switch (y) {
		ArInt(y_val) : {
			if (y_val == 0) { x; }
			else { ArSum(x, y); }
		}
		default : ArSum(x, y);
	}
}

simplify_sub(x : ArExpr, y : ArExpr) -> ArExpr {
	switch (x) {
		ArInt(x_val) : {
			if (x_val == 0) { y; }
			else handle_sub_y(x, y);
		}
		default: handle_sub_y(x, y);
	}
}

handle_sub_y(x : ArExpr, y : ArExpr) -> ArExpr {
	switch (y) {
		ArInt(y_val) : {
			if (y_val == 0) { x; }
			else { ArSub(x, y); }
		}
		default : ArSub(x, y);
	}
}

handle_mult_y(x : ArExpr, y : ArExpr) -> ArExpr {
	switch (y) {
		ArInt(y_val) : {
			if (y_val == 0) { ArInt(0); }
			else if (y_val == 1) { x; }
			else { ArMult(x, y); }
		}
		default : ArMult(x, y);
	}
}

simplify_mult(x : ArExpr, y : ArExpr) -> ArExpr {
	switch (x) {
		ArInt(x_val) : {
			if (x_val == 0) { ArInt(0); }
			else if (x_val == 1) { y; }
			else handle_mult_y(x, y);
		}
		default: handle_mult_y(x, y);
	}
}


arith_simplify(expr : ArExpr) -> ArExpr {
	switch(expr) {
		ArSum(lhs, rhs) : simplify_sum(arith_simplify(lhs), arith_simplify(rhs));

		ArMult(lhs, rhs) : simplify_mult(arith_simplify(lhs), arith_simplify(rhs));

		ArSub(lhs, rhs) : simplify_sub(arith_simplify(lhs), arith_simplify(rhs));

		ArDiv(lhs, rhs) : ArDiv(arith_simplify(lhs), arith_simplify(rhs));

		ArVar(var) : ArVar(var);

		ArMinus(num) : ArMinus(num);

		ArInt(val) : ArInt(val);
	}
}

calculate(expr : ArExpr) -> Maybe<ArRat> {
    switch(expr : ArExpr) {
        ArSum(lhs, rhs) : apply(calculate(lhs),
								calculate(rhs),
								\x, y -> simplify_fract(x.num * y.den + x.den * y.num, x.den * y.den));

        ArMult(lhs, rhs) : apply(calculate(lhs),
								 calculate(rhs),
								 \x, y -> simplify_fract(x.num * y.num, x.den * y.den));

        ArSub(lhs, rhs) : apply(calculate(lhs),
								calculate(rhs),
								\x, y -> simplify_fract(x.num * y.den - x.den * y.num, x.den * y.den));

        ArDiv(lhs, rhs) : apply(calculate(lhs),
								calculate(rhs),
								\x, y -> simplify_fract(x.num * y.den, x.den * y.num));

		ArVar(var) : handle_var(var);

		ArMinus(num) : {
			switch (num) {
				ArInt(val) : Some(ArRat(-val, 1));
				ArVar(var) : {
					rat : Maybe<ArRat> = handle_var(var);
					switch (rat) {
						None() : None();
						Some(v) : Some(ArRat(-v.num, v.den));
					}
				}
			}
		}

        ArInt(var) : {
			Some(ArRat(var, 1));
		}
    }
}

printArRat(fract : Maybe<ArRat>) -> void {
	switch (fract) {
		None() : println(None());
		Some(val) : {
			if (val.den == 1) {
				println(i2s(val.num));
			}
			else if (val.num == 0) {
				println("0");
			}
			else {
				println(i2s(val.num) + " / " + i2s(val.den));
			}
		}
	}
}


ar2s(expr : ArExpr) -> string {
    switch(expr : ArExpr) {
        ArSum(lhs, rhs) :  "(" + ar2s(lhs) + " + " + ar2s(rhs) + ")";
        ArMult(lhs, rhs) : "(" + ar2s(lhs) + " * " + ar2s(rhs) + ")";
        ArSub(lhs, rhs) : "(" + ar2s(lhs) + " - " + ar2s(rhs) + ")";
        ArDiv(lhs, rhs) : "(" + ar2s(lhs) + " / " + ar2s(rhs) + ")";
        ArInt(var) : i2s(var);
		ArVar(var) : var;
		ArMinus(num) : "-" + ar2s(num);
    }
}

diff(expr : ArExpr, par : string) -> ArExpr {
    switch(expr) {
        ArSum(lhs, rhs) : ArSum(diff(lhs, par), diff(rhs, par));
        ArMult(lhs, rhs) : ArSum(ArMult(diff(lhs, par), rhs), ArMult(lhs, diff(rhs, par)));
        ArSub(lhs, rhs) : ArSub(diff(lhs, par), diff(rhs, par));
        ArDiv(lhs, rhs) : ArDiv(ArSub(ArMult(diff(lhs, par), rhs), ArMult(lhs, diff(rhs, par))), ArMult(rhs, rhs));
        ArInt(var) : ArInt(0);

		ArVar(var) : {
			if (var == par) { ArInt(1); }
			else { ArInt(0); }
		}

		ArMinus(num) : {
			switch (num) {
				ArInt(var) : ArInt(0);
				ArVar(var) : {
					if (var == par) { ArMinus(ArInt(1)); }
					else ArInt(0);
				}
			}
		}
    }
}

main() {
//	example = "((1 + ((x * 1) / 3)) * 0)";
//	example = "((3 * x) + (0 * x))";
//  1 * (x * 5) - (1 + x) * 5
	example = "(1/x)";
//	example = "(((1 + x) * (x * 5)) - x1)";
	
//	example = "(x / 2)";
	println("Source expression:");
	println(example);

	print("Parameter = ");
par1 : string = readUntil("\n");
	   par = substring(par1, 0, strlen(par1) - 1);

	   println("After diff:");
	   println(ar2s(diff(arith_simplify(s2ar(example)), par)));
	println("After simplification:");
	println(ar2s(arith_simplify(diff(s2ar(example), par))));
}
