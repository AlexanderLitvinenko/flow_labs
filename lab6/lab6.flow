import lingo/pegcode/driver;
import flowstructs;

ArExpr ::= ArSum, ArMult, ArInt;
    ArSum(lhs:ArExpr, rhs:ArExpr);
    ArMult(lhs:ArExpr, rhs:ArExpr);
    ArInt(val : int);

s2ar(str: string) -> ArExpr {
    e_gr = "#include grammar";
    parsic(
        compilePegGrammar(e_gr),
        str,
        defaultPegActions
    );
}

ar2s(exp: ArExpr) -> string {
    switch (exp) {
        ArSum(lhs, rhs) : ar2s(lhs) + " " + ar2s(rhs) + " +";
        ArMult(lhs, rhs) : ar2s(lhs) + " " + ar2s(rhs) + " *";
        ArInt(val): i2s(val);
    }
}

ar2i(expr: ArExpr) -> int {
    switch (expr) {
        ArSum(lhs, rhs) : ar2i(lhs) + ar2i(rhs);
        ArMult(lhs, rhs) : ar2i(lhs) * ar2i(rhs);
        ArInt(val): val;
    }
}

rpn2i(expr : string) -> string {

	tokens : [string] = strSplit(expr, " "); 

	fold(tokens, [], \stack, cur -> {
		if (cur == "+") {

			value = i2s(
				s2i(stack[length(stack) - 1]) + 
				s2i(stack[length(stack) - 2])
				);

			interm_stack = replace(stack, length(stack), value);

			removeRange(interm_stack, length(interm_stack) - 3, 2);
		}

		else if (cur == "*") {

			value = i2s(
				s2i(stack[length(stack) - 1]) *
				s2i(stack[length(stack) - 2])
				);

			interm_stack = replace(stack, length(stack), value);

			removeRange(interm_stack, length(interm_stack) - 3, 2);
		}

		else {
			replace(stack, length(stack), cur);
		}

	})[0];
}


main() {
    example = "(3 * (1 + 2))";

	println("Source expression: ");
	println(example);
	
	println("Rpn expr: ");
    rpn : string = ar2s(s2ar(example));
    println(rpn);
	
	println("Result: ");
	println(rpn2i(rpn));
}

